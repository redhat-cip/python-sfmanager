.\" Man page generated from reStructuredText.
.
.TH "SFMANAGER" "1" "February 07, 2017" "0.1" "sfmanager (SF client)"
.SH NAME
sfmanager \- sfmanager Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
This documentation describes the shell utility \fBsfmanager\fP, which is a CLI for
the managesf REST API interface in Software Factory..
.SH INTRODUCTION
.SS Global options
.sp
By default all actions require authentication as well as some information about
the remote servers.
.INDENT 0.0
.TP
.B \-\-url <\fI\%http://sfgateway.dom\fP>
URL of the managesf instance
.TP
.B \-\-auth user:password
Username and password to use when accessing the managesf interface.
This option is only valid if it is a local user within Software Factory
.UNINDENT
.sp
There are a few optional arguments as well:
.INDENT 0.0
.TP
.B \-\-insecure
Disable SSL certificate verification. Enabled by default
.TP
.B \-\-debug
Enable debug messages in console. Disabled by default
.UNINDENT
.SH USER MANAGEMENT
.sp
These commands manage the local users, that are not using external
authentication systems like Github.
.SS Add user
.sp
Creates a new user in the internal backend and registers the user in Gerrit and Redmine
.INDENT 0.0
.TP
.B \-\-username [username], \-u [username]
A unique username/login
.TP
.B \-\-password [password], \-p [password]
The user password, can be provided interactively if this option is empty
.TP
.B \-\-email [email], \-e [email]
The user email
.TP
.B \-\-fullname [John Doe], \-f [John Doe]
The user\(aqs full name, defaults to username
.TP
.B \-\-ssh\-key [/path/to/pub_key], \-s [/path/to/pub_key]
The user\(aqs ssh public key file
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          user create \-\-username jdoe \-\-password secret \-\-fullname "User Tester" \e
               \-\-email jane@doe.org
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Update user
.sp
Update an existing local user. A user can update it\(aqs own details, and admins
can also update other user details. Takes the same arguments as user create.
The options \fI\-\-fullname\fP and \fI\-\-ssh\-key\fP (if updated) won\(aqt be taken in account
inside SF services. Only the password can be updated.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          user update \-\-username jdoe \-\-password unguessable
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Delete user
.sp
Disable the user\(aqs account. That does not prevent the user from contributing, it
only prevents the user from login in to Software Factory.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          user delete \-\-username jdoe
.ft P
.fi
.UNINDENT
.UNINDENT
.SH REGISTERED USER MANAGEMENT
.sp
These commands manage the global users. Please note that these commands do not
modify users on Software Factory\(aqs local authentication backend.
.SS Register user
.sp
Registers the user with all the services. The typical use
case is to provision a user before his or her first login on Software Factory,
so that project memberships can be set ahead of time.
.INDENT 0.0
.TP
.B \-\-username [username], \-u [username]
A unique username/login
.TP
.B \-\-email [email], \-e [email]
The user email
.TP
.B \-\-fullname [John Doe], \-f [John Doe]
The user\(aqs full name, defaults to username
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          sf_user create \-\-username jdoe \-\-fullname "User Tester" \e
               \-\-email jane@doe.org
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Deregister user
.sp
This command removes the user from all the services. It does not delete a user
from the local authentication backend; the user can also register again simply
by logging into Software Factory. The typical use case is when a user experiences
a problem with external authentication, removing the user from the services and
relogging might be a solution.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          sf_user delete \-\-username jdoe
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          sf_user delete \-\-email jdoe@users.com
.ft P
.fi
.UNINDENT
.UNINDENT
.SS List registered users
.sp
This command lists all the users currently registered (ie who have logged in at
least once) on Software Factory.
.sp
For each user, the following information is returned:
.INDENT 0.0
.IP \(bu 2
the username
.IP \(bu 2
the user\(aqs full name
.IP \(bu 2
the user\(aqs email
.IP \(bu 2
the user\(aqs internal id within manageSF
.IP \(bu 2
the user\(aqs id within cauth, the SSO system
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          sf_user list
.ft P
.fi
.UNINDENT
.UNINDENT
.SH BACKUP AND RESTORE
.sp
Backups include database dumps from Gerrit, Jenkins, Mysql, cauth and managesf
as well as some important configuration files like Gerrit replication settings,
SSH keys and Hiera settings. This includes credentials; please see below how to
store backups encrypted. Because Mysql is used as the default backend in
Redmine, Paste and Etherpad all of this data is also included in the backup
file.
.SS Create a new backup
.sp
SF exposes ways to perform and retrieve a backup of all the user data store in
your SF installation. This backup can be used in case of disaster to quickly
recover user data on the same or another SF installation (of the same version).
.sp
Only the SF administrator can perform and retrieve a backup.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          system backup_start
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Once the server generated the tar file of the backup you can then download it with
the following command
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
          system backup_get
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A file called "sf_backup.tar.gz" will be created in the local directory.
.SS Using GPG to encrypt and decrypt backups
.sp
It is recommended to store the backup files encrypted when using external
storage services, since the user and administrative credentials are included
in the backup.
When using the export_backup_swift.sh shell script included in SF, all backups
are automatically encrypted using GPG before uploading to Swift. A special
public GPG key is required for this, and it has to be stored on the SF node.
To create this key, do the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
gpg \-\-gen\-key  # Use "sfadmin" as name when creating the key
gpg \-\-export \-a sfadmin > sfadmin.pub
gpg \-\-export\-secret\-key \-a sfadmin > sfadmin.key
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Make sure you copy keep the sfadmin.key in a safe place. For example, if it is
encrypted using a strong password store it alongside your backup files.
.sp
You have to copy this public key to the SF node, and import it as root user.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
scp sfadmin.pub root@sftests.com:.
gpg \-\-import sfadmin.pub
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you need to restore from a backup, you need to decrypt the tar.gz file first.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
gpg \-d sf_backup.tar.gz.gpg
.ft P
.fi
.UNINDENT
.UNINDENT
.SH REQUEST A PASSWORD TO ACCESS THE GERRIT API
.sp
To request a random password to access the Gerrit API for the current user. This
is useful for using tools like  \fI\%gertty\fP .
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
               gerrit_api_htpasswd generate_password
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and to deactivates the password from Gerrit.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sfmanager \-\-url <http://sfgateway.dom> \-\-auth user:password \e
               gerrit_api_htpasswd delete_password
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Red Hat
.SH COPYRIGHT
2015, 2016 Red Hat
.\" Generated by docutils manpage writer.
.
